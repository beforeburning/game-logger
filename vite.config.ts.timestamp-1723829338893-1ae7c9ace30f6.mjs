// vite.config.ts
import { defineConfig, loadEnv } from "file:///Users/burning/wwwroot/yewei/game-logger/node_modules/.pnpm/vite@4.4.7_@types+node@20.4.5_less@4.1.3_terser@5.19.2/node_modules/vite/dist/node/index.js";
import path2 from "path";

// build/vite/plugins/index.ts
import purgeIcons from "file:///Users/burning/wwwroot/yewei/game-logger/node_modules/.pnpm/vite-plugin-purge-icons@0.9.2_vite@4.4.7/node_modules/vite-plugin-purge-icons/dist/index.mjs";
import react from "file:///Users/burning/wwwroot/yewei/game-logger/node_modules/.pnpm/@vitejs+plugin-react-swc@3.3.2_vite@4.4.7/node_modules/@vitejs/plugin-react-swc/index.mjs";

// build/vite/plugins/compression.ts
import compressionPlugin from "file:///Users/burning/wwwroot/yewei/game-logger/node_modules/.pnpm/vite-plugin-compression@0.5.1_vite@4.4.7/node_modules/vite-plugin-compression/dist/index.mjs";
function viteCompressionPlugin(compress = "none", deleteOriginFile = false) {
  const compressList = compress.split(",");
  const plugins = [];
  if (compressList.includes("gzip")) {
    plugins.push(
      compressionPlugin({
        ext: ".gz",
        deleteOriginFile
      })
    );
  }
  if (compressList.includes("brotli")) {
    plugins.push(
      compressionPlugin({
        ext: ".br",
        algorithm: "brotliCompress",
        deleteOriginFile
      })
    );
  }
  return plugins;
}

// build/vite/plugins/html.ts
import { createHtmlPlugin } from "file:///Users/burning/wwwroot/yewei/game-logger/node_modules/.pnpm/vite-plugin-html@3.2.0_vite@4.4.7/node_modules/vite-plugin-html/dist/index.mjs";
function viteHtmlPlugins(metaEnv, isProd, isBuild) {
  return createHtmlPlugin({
    minify: true,
    // entry: 'src/main.ts',
    // template: 'public/index.html',
    inject: {
      data: {
        keywords: metaEnv.VITE_PLUGIN_KEYWORDS,
        author: metaEnv.VITE_PLUGIN_AUTHOR,
        description: metaEnv.VITE_PLUGIN_DESCRIPTION,
        icon: metaEnv.VITE_PLUGIN_ICON,
        noScriptTitle: metaEnv.VITE_PLUGIN_NO_SCRIPT_TITLE,
        title: metaEnv.VITE_PLUGIN_TITLE,
        debugScript: !isProd || metaEnv.VITE_PLUGIN_SHOW_DEBUG_SCRIPT === "true" ? '<script src="/spacingjs.js" defer></script>' : "",
        processScript: isBuild ? '<script type="module">import process from "process";window.process=process;</script>' : ""
      },
      tags: [
        // {
        //   injectTo: 'body-prepend',
        //   tag: 'div',
        //   attrs: {
        //     id: 'tag',
        //   },
        // },
      ]
    }
  });
}

// build/vite/plugins/imagemin.ts
import viteImagemin from "file:///Users/burning/wwwroot/yewei/game-logger/node_modules/.pnpm/vite-plugin-imagemin@0.6.1_vite@4.4.7/node_modules/vite-plugin-imagemin/dist/index.mjs";
function imageminPlugin() {
  const plugin = viteImagemin({
    gifsicle: {
      optimizationLevel: 7,
      interlaced: false
    },
    optipng: {
      optimizationLevel: 7
    },
    mozjpeg: {
      quality: 8
    },
    pngquant: {
      quality: [0.8, 0.9],
      speed: 4
    },
    svgo: {
      plugins: [
        {
          removeViewBox: false
        },
        {
          removeEmptyAttrs: false
        }
      ]
    }
  });
  return plugin;
}

// build/vite/plugins/pwa.ts
import { VitePWA } from "file:///Users/burning/wwwroot/yewei/game-logger/node_modules/.pnpm/vite-plugin-pwa@0.16.4_vite@4.4.7_workbox-build@7.0.0_workbox-window@7.0.0/node_modules/vite-plugin-pwa/dist/index.js";
function pwaPlugin(env) {
  const {
    VITE_PLUGIN_USE_PWA: shouldUsePwa,
    VITE_PLUGIN_GLOB_APP_TITLE: appTitle,
    VITE_PLUGIN_GLOB_APP_SHORT_NAME: shortName
  } = env;
  if (shouldUsePwa) {
    const pwaPlugin2 = VitePWA({
      manifest: {
        name: appTitle,
        short_name: shortName,
        icons: [
          // 图片还不知道怎么配置
          // {
          //     src: "./resource/images/pwa-192x192.png",
          //     sizes: "192x192",
          //     type: "image/png",
          // },
          // {
          //     src: "./resource/images/pwa-512x512.png",
          //     sizes: "512x512",
          //     type: "image/png",
          // },
        ]
      }
    });
    return pwaPlugin2;
  }
  return [];
}

// build/vite/plugins/svgIcons.ts
import { createSvgIconsPlugin } from "file:///Users/burning/wwwroot/yewei/game-logger/node_modules/.pnpm/vite-plugin-svg-icons@2.0.1_vite@4.4.7/node_modules/vite-plugin-svg-icons/dist/index.mjs";
import path from "path";
function svgIconsPlugin(isProd) {
  const svgIconsPlugin2 = createSvgIconsPlugin({
    iconDirs: [path.resolve(process.cwd(), "src/assets/svg")],
    svgoOptions: isProd,
    // default
    symbolId: "icon-[dir]-[name]"
  });
  return svgIconsPlugin2;
}

// build/vite/plugins/visualizer.ts
import { visualizer } from "file:///Users/burning/wwwroot/yewei/game-logger/node_modules/.pnpm/rollup-plugin-visualizer@5.9.2_rollup@2.79.1/node_modules/rollup-plugin-visualizer/dist/plugin/index.js";
function visualizerPlugin() {
  if (process.env.REPORT) {
    const v = visualizer({
      filename: "./node_modules/.cache/visualizer/stats.html",
      open: true,
      gzipSize: true,
      brotliSize: true
    });
    return [v];
  }
  return [];
}

// build/vite/plugins/yaml.ts
import ViteYaml from "file:///Users/burning/wwwroot/yewei/game-logger/node_modules/.pnpm/@modyfi+vite-plugin-yaml@1.0.4_rollup@2.79.1_vite@4.4.7/node_modules/@modyfi/vite-plugin-yaml/dist/index.js";
function viteYaml() {
  return [ViteYaml()];
}

// build/vite/plugins/index.ts
var createVitePlugins = (metaEvn, isProd, isBuild) => {
  const {
    VITE_PLUGIN_LEGACY: legacy,
    VITE_PLUGIN_BUILD_COMPRESS_TYPE: compressType,
    VITE_PLUGIN_BUILD_COMPRESS_DELETE_ORIGIN_FILE: shouldBuildCompressDeleteFile,
    VITE_PLUGIN_USE_IMAGEMIN: shouldUseImagemin
  } = metaEvn;
  const vitePlugins = [];
  vitePlugins.push(react());
  vitePlugins.push(...viteHtmlPlugins(metaEvn, isProd, isBuild));
  vitePlugins.push(svgIconsPlugin(isProd));
  vitePlugins.push(...viteYaml());
  vitePlugins.push(purgeIcons({}));
  vitePlugins.push(...visualizerPlugin());
  if (isProd) {
    vitePlugins.push(
      viteCompressionPlugin(compressType, shouldBuildCompressDeleteFile === "true")
      // 压缩
    );
    shouldUseImagemin === "true" && vitePlugins.push(imageminPlugin());
    vitePlugins.push(...pwaPlugin(metaEvn));
  }
  return vitePlugins;
};

// vite.config.ts
var __vite_injected_original_dirname = "/Users/burning/wwwroot/yewei/game-logger";
var vite_config_default = defineConfig(({ command, mode }) => {
  console.warn("command ->", command);
  console.warn("mode ->", mode);
  const readEnv = loadEnv(mode, "./env");
  const metaEvn = readEnv;
  console.warn("IMPORT_META_ENV -> ", metaEvn);
  let port = parseInt(metaEvn.VITE_PORT ?? "3000");
  if (isNaN(port))
    port = 3e3;
  console.log("port ->", port);
  const isBuild = command === "build";
  const isProd = command === "build" && mode === "production";
  const drop_console = isProd || metaEvn.VITE_DROP_CONSOLE === "true";
  const drop_debugger = isProd || metaEvn.VITE_DROP_DEBUGGER === "true";
  let define = {};
  if (!isBuild) {
    define = {
      ...define,
      // ? 本来 astrox me 登录需要的，但是打包总是失败，html 里面引入了，这里就不需要了
      "process.env.NODE_ENV": JSON.stringify(mode),
      // 接口文件里面需要用来判断 莫名其妙要加双引号
      "process.env": process.env
      // 环境变量
    };
  }
  const common = {
    publicDir: "public",
    // 该目录下文件会原封不动存放至 dist
    mode,
    // 运行模式
    define,
    plugins: [...createVitePlugins(metaEvn, isProd, isBuild)],
    // 插件
    resolve: {
      alias: {
        "@": path2.resolve(__vite_injected_original_dirname, "src")
        // @符号要解析
      },
      extensions: [".js", ".ts", ".jsx", ".tsx"]
      // import 可以省略的拓展名
    },
    build: {
      target: "es2020",
      minify: isProd ? "terser" : false,
      // 默认为 Esbuild，它比 terser 快 20-40 倍，压缩率只差 1%-2%
      terserOptions: isProd && {
        compress: {
          // drop_console, // 生产环境去除 console
          drop_debugger
          // 生产环境去除 debugger
        }
      }
    },
    esbuild: {},
    optimizeDeps: {
      esbuildOptions: {
        target: "es2020"
        // you can also use 'es2020' here
      }
    },
    envDir: "env",
    envPrefix: ["BUILD", "CONNECT", "ALCHEMY"],
    clearScreen: false
  };
  if (!isProd) {
    return {
      // serve 独有配置 开发模式
      ...common,
      server: {
        hmr: true,
        // 热更新
        cors: true,
        host: "0.0.0.0",
        port
      }
    };
  } else {
    return {
      // build 独有配置 生产模式
      ...common
    };
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
